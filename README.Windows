Getting started with DOSBox-X development under Windows 10
==========================================================

Visual Studio
-------------

- download Visual Studio installer from https://www.visualstudio.com/downloads
- launch the installer
- in 'Workloads' tab, tick 'Desktop development with C++'
- in 'Individual components' tab, 'SDKs, libraries, and frameworks' section, tick 'Windows 8.1 SDK'
- in 'Individual components' tab, 'Compilers, build tools, and runtimes' section, tick 'Windows Universal CRT SDK'
- download the DirectX SDK (June 2010) from https://www.microsoft.com/en-us/download/details.aspx?id=6812
- launch the installer and follow the instructions
- if you encounter error S1023 during installation, follow the instructions at https://support.microsoft.com/en-us/help/2728613/s1023-error-when-you-install-the-directx-sdk-june-2010
- open the DOSBox-X Visual Studio solution located in 'vs2015' folder of the repository

Visual Studio must be closed prior installing the DirectX SDK, else it won't pick up environment variables set by the DirectX SDK and this will result in building errors.

You can pass additional options to the custom-build of SDL1 in the solution through the SDL1AdditionalOptions environment variable, e.g.

REM adding a preprocessor define
SET SDL1AdditionalOptions=/DMY_DEFINE
MSBUILD ...


Visual Studio Code
------------------

1. Install the building environment

If you have a side install of regular Visual Studio and already set up the development environment for DOSBox-X, you can skip this step.

Get and install Build Tools for Visual Studio 2017 from https://www.visualstudio.com/downloads/#other and install the following options:

	Workloads
		Visual C++ build tools
	Individual components
		Compilers, build tools, and runtimes
			Windows Universal CRT SDK
		SDKs, libraries, and frameworks
			Windows 8.1 SDK

2. Add msbuild to path environment variable

 - open Developer Command Prompt for VS 2017
 - type 'where msbuild' and take note of first occurrence found
 - open environment variables editor by running '%windir%\System32\rundll32.exe sysdm.cpl,EditEnvironmentVariables'
 - add the found path to the environment variable

3. Setup VSCode build task

 - open DOSBox-X folder in VSCode
 - menu Tasks, Configure Default Build Task
 - click 'Create tasks.json file from template'
 - click 'MSBuild Executes the build target'

The tasks.json file is now visible but still needs some polish:

 - menu Tasks, Configure Default Build Task
 - click 'build'
 - in the 'tasks/args' section, add "vs2015/dosbox-x.sln" argument
 
You can now build DOSBox-X using menu Tasks, Run Build Task.

4. Setting up the debugging

 - menu Debug, Start Debugging
 - click 'More...'
 - install C/C++ (extension identifier is ms-vscode.cpptools)
 - menu Debug, Start Debugging
 - click 'C++ (Windows)'
 - in lauch.json 'configurations' section, adjust the first configuration 'program' value, e.g. "${workspaceFolder}/bin/Win32/Debug/dosbox-x.exe"

You can now debug DOSBox-X.

5. Notes and TODO

Even though it leverages existing Visual Studio solution, you do not need Visual Studio to be installed on your system, build tools are sufficient.

These instructions were written in an already set up environment, should some step be not reproducible, open an issue with the exact details so this guide can be improved.

The section about configuring IntelliSense still needs to be written.


CMake
-----

The CMakeLists.txt is provided as an alternative to the solution in 'vs2015' folder but with a few limitiations compared to it:

- VCPKG from Microsoft is the package manager used to fetch dependencies, consequently, only an SDL2 build is possible
- statically linking dependencies is not supported


Joystick improvements for SDL1 build
------------------------------------

XInput is now supported through the SDL_JOYSTICK_XINPUT define, this fixes the long plaguing issue where triggers were seen as the third axis on Xbox controllers. The resulting experience was an unsable input since both triggers shared the same the axis in the default DirectInput driver provided by Microsoft, for compatibility reasons. Some might have noticed that an earlier version of the device driver did not exhibit such behavior, at the cost of breaking legacy compatibility. By enabling this flag, XInput will be used in place of DirectInput. Consequently, the third axis will be the horizontal axis of the right thumbstick and triggers will act as the fifth and sixth axes when using the 'ch' joystick type.

To enable it:

set SDL1AdditionalOptions=/DSDL_JOYSTICK_XINPUT
msbuild dosbox-x.sln /p:Configuration=Debug /p:Platform=Win32
